# cmake file

cmake_minimum_required(VERSION 3.11.0)

include(GNUInstallDirs)

set(ENUMFLAGS_NAME "enum-flags")

set(ENUMFLAGS_TARGET "${ENUMFLAGS_NAME}")
set(ENUMFLAGS_TARGET_EXPORT "${ENUMFLAGS_NAME}")
set(ENUMFLAGS_NS "${ENUMFLAGS_NAME}::")

set(ENUMFLAGS_INCLUDE_DIR "include")

set(ENUMFLAGS_STANDALONE TRUE)

if(NOT CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
  set(ENUMFLAGS_STANDALONE FALSE)

  file(RELATIVE_PATH ENUMFLAGS_REL_DIR ${CMAKE_SOURCE_DIR}
    ${CMAKE_CURRENT_LIST_DIR})

  if(NOT ENUMFLAGS_REL_DIR STREQUAL "")
    set(ENUMFLAGS_REL_DIR "${ENUMFLAGS_REL_DIR}/")
  endif()
endif()

include(${CMAKE_CURRENT_LIST_DIR}/cmake/common.cmake)

if(ENUMFLAGS_STANDALONE)
  project(${ENUMFLAGS_NAME} CXX)
endif()

# CMP0056 is required for any libc++abi dependency of the try_compile() command
# this bumps required version to 3.2
# otherwise LD_LIBRARY_DIR needs to be set
cmake_policy(SET CMP0056 NEW)

#

if(NOT ENUMFLAGS_STANDALONE)
  list(APPEND ENUMFLAGS_TARGET_OPTIONS IMPORTED GLOBAL)
endif()

add_library(${ENUMFLAGS_TARGET} INTERFACE ${ENUMFLAGS_TARGET_OPTIONS})

target_include_directories(${ENUMFLAGS_TARGET} INTERFACE
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/${ENUMFLAGS_INCLUDE_DIR}>)
target_include_directories(${ENUMFLAGS_TARGET} INTERFACE
  $<INSTALL_INTERFACE:${ENUMFLAGS_REL_DIR}${CMAKE_INSTALL_INCLUDEDIR}>)

add_library(${ENUMFLAGS_NS}${ENUMFLAGS_TARGET} ALIAS ${ENUMFLAGS_TARGET})


# installation

set(CMAKE_INSTALL_MESSAGE "LAZY")

if(ENUMFLAGS_STANDALONE)
  install(DIRECTORY "${ENUMFLAGS_INCLUDE_DIR}/"
    DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")

  install(TARGETS ${ENUMFLAGS_TARGET}
    EXPORT "${ENUMFLAGS_TARGET_EXPORT}"
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/")

  install(EXPORT "${ENUMFLAGS_TARGET_EXPORT}"
    NAMESPACE "${ENUMFLAGS_NS}"
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/")
endif()

